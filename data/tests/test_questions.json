[{
    "question": "LCEL(LangChain Expression Language)이 무엇인가요? 그리고 왜 사용하나요?",
    "expected_answer": "LCEL은 파이프라인처럼 체인을 구성할 수 있게 해주는 선언적 언어입니다. 스트리밍, 병렬 처리, 비동기 지원 등 프로덕션 환경에 필요한 기능을 쉽게 구현할 수 있어 사용됩니다.",
    "source": "https://python.langchain.com/docs/expression_language/"
  },
  {
    "question": "RAG 체인에서 검색된 문서의 출처(source)는 어떻게 답변에 포함시키나요?",
    "expected_answer": "검색된 Document 객체의 metadata 딕셔너리에 포함된 'source' 키 값을 참조하여 답변과 함께 제공할 수 있습니다. 보통 프롬프트 템플릿 단계에서 이를 처리합니다.",
    "source": "https://python.langchain.com/docs/use_cases/question_answering/sources"
  },
  {
    "question": "LangChain에서 Agent는 어떻게 작동하나요?",
    "expected_answer": "Agent는 LLM을 추론 엔진으로 사용하여, 어떤 행동을 취할지 결정하고, 도구(Tools)를 실행하며, 그 결과를 관찰하여 최종 답변을 찾을 때까지 과정을 반복합니다.",
    "source": "https://python.langchain.com/docs/modules/agents/"
  },
  {
    "question": "챗봇에 대화 기록을 유지하려면 어떤 기능을 사용해야 하나요?",
    "expected_answer": "LangChain의 Memory 컴포넌트를 사용합니다. ConversationBufferMemory와 같은 클래스를 체인에 추가하여 이전 대화 내용을 기억하고 다음 답변에 활용할 수 있습니다.",
    "source": "https://python.langchain.com/docs/modules/memory/"
  },
  {
    "question": "PDF 파일에서 텍스트를 추출하려면 어떤 Document Loader를 사용해야 하나요?",
    "expected_answer": "PyPDFLoader를 사용하여 PDF 파일의 내용을 페이지별로 나누어 Document 객체로 로드할 수 있습니다.",
    "source": "https://python.langchain.com/docs/modules/data_connection/document_loaders/pdf"
  },
  {
    "question": "웹사이트의 내용을 스크래핑하여 문서로 가져오는 Loader는 무엇인가요?",
    "expected_answer": "WebBaseLoader를 사용하면 URL을 전달하여 웹 페이지의 HTML 콘텐츠를 파싱하고 텍스트를 추출하여 문서로 만들 수 있습니다.",
    "source": "https://python.langchain.com/docs/modules/data_connection/document_loaders/web_base"
  },
  {
    "question": "RecursiveCharacterTextSplitter는 다른 Text Splitter와 비교했을 때 어떤 특징이 있나요?",
    "expected_answer": "RecursiveCharacterTextSplitter는 ['\n\n', '\n', ' ', '']와 같은 구분자 목록을 순서대로 시도하여 텍스트를 의미적으로 최대한 연결된 상태로 분할하려는 특징이 있습니다.",
    "source": "https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/recursive_character"
  },
  {
    "question": "ChromaDB 벡터스토어에 연결하고 컬렉션을 생성하는 기본 코드를 보여주세요.",
    "expected_answer": "import chromadb; client = chromadb.Client(); collection = client.create_collection('my_collection') 코드를 통해 클라이언트를 초기화하고 컬렉션을 생성할 수 있습니다.",
    "source": "https://python.langchain.com/docs/integrations/vectorstores/chroma/"
  },
  {
    "question": "LLM의 답변을 JSON 형식으로 구조화하려면 어떤 Output Parser를 사용해야 하나요?",
    "expected_answer": "PydanticOutputParser 또는 JsonOutputParser를 사용합니다. Pydantic 모델을 정의하고 파서에 주입하면, LLM이 해당 스키마에 맞는 JSON 형식의 답변을 생성하도록 유도할 수 있습니다.",
    "source": "https://python.langchain.com/docs/modules/model_io/output_parsers/json"
  },
  {
    "question": "Agent가 사용할 수 있는 사용자 정의 도구(Custom Tool)는 어떻게 만드나요?",
    "expected_answer": "@tool 데코레이터를 사용하여 함수를 정의하면 간단하게 사용자 정의 도구를 만들 수 있습니다. 함수에는 이름, 설명, 그리고 인자에 대한 명확한 docstring을 작성해야 합니다.",
    "source": "https://python.langchain.com/docs/modules/agents/tools/custom_tools"
  },
  {
    "question": "LLMChain과 SequentialChain의 차이점은 무엇인가요?",
    "expected_answer": "LLMChain은 단일 LLM 호출을 실행하는 가장 기본적인 체인입니다. 반면 SequentialChain은 여러 체인이나 LLM 호출의 출력을 다음 체인의 입력으로 순차적으로 연결하는 역할을 합니다.",
    "source": "https://python.langchain.com/docs/modules/chains/foundational/sequential_chains"
  },
  {
    "question": "PromptTemplate에서 변수를 동적으로 할당하는 방법은 무엇인가요?",
    "expected_answer": "PromptTemplate을 생성할 때 input_variables 리스트에 변수 이름을 지정하고, 체인을 실행할 때 해당 변수 이름에 맞는 값을 딕셔너리 형태로 전달하여 동적으로 할당합니다.",
    "source": "https://python.langchain.com/docs/modules/model_io/prompts/prompt_templates/"
  },
  {
    "question": "LangChain의 콜백(Callback) 시스템은 어떤 용도로 사용되나요?",
    "expected_answer": "콜백은 LLM 애플리케이션의 다양한 이벤트(예: 체인 시작, LLM 호출, 에러 발생 등)를 로깅, 모니터링, 스트리밍하는 데 사용됩니다. LangSmith와 같은 도구와 연동할 때 핵심적인 역할을 합니다.",
    "source": "https://python.langchain.com/docs/modules/callbacks/"
  },
  {
    "question": "VectorStoreRetriever에서 검색 유형(search_type)을 'mmr'로 설정하면 어떻게 동작하나요?",
    "expected_answer": "검색 유형을 'mmr'(Maximal Marginal Relevance)로 설정하면, 검색 결과의 유사도뿐만 아니라 다양성도 함께 고려하여 문서를 선택합니다. 이는 서로 비슷하지만 약간 다른 정보를 가진 문서를 함께 반환하는 데 도움이 됩니다.",
    "source": "https://python.langchain.com/docs/modules/data_connection/retrievers/vectorstore"
  },
  {
    "question": "RunnablePassthrough는 LCEL에서 어떤 역할을 하나요?",
    "expected_answer": "RunnablePassthrough는 입력을 변경하지 않고 그대로 전달하거나, 새로운 키를 추가하여 딕셔너리를 확장하는 역할을 합니다. 체인 내에서 특정 데이터를 다음 단계로 그대로 전달해야 할 때 유용하게 사용됩니다.",
    "source": "https://python.langchain.com/docs/expression_language/how_to/passthrough"
  }
]