# Docker Compose Version: 최신 포맷 (version 라인 제거)

services:
  # --- 1. Vector Database: ChromaDB ---
  chromadb:
    image: chromadb/chroma:0.4.24
    container_name: vector_db
    ports:
      - "8000:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      # ChromaDB 데이터 영구 저장 설정
      - IS_PERSISTENT=TRUE
      - PERSIST_DIRECTORY=/chroma/chroma
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - rag-network
    restart: unless-stopped
    # Healthcheck를 제거하여 컨테이너 시작 실패 문제를 해결
    # healthcheck 블록 없음.

  # --- 2. LangChain RAG Application (FastAPI & Streamlit) ---
  rag-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: rag-application
    # 외부 포트: 8501 (Streamlit), 8080 (FastAPI)
    ports:
      - "8501:8501"
      - "8080:8080"
    volumes:
      # 개발 편의성을 위해 현재 디렉토리 전체를 마운트
      - .:/app 
      - /app/node_modules # 노드 모듈 제외 (필요 시)
    environment:
      # ChromaDB 연결 정보 (컨테이너 이름과 포트 사용)
      - CHROMA_HOST=vector_db
      - CHROMA_PORT=8000
      - PYTHONUNBUFFERED=1
      # 최종 통일된 Solar API 키 사용
      - UPSTAGE_API_KEY=${UPSTAGE_API_KEY} 
    depends_on:
      chromadb:
        # DB 서버가 시작(service_started)되기만 하면 API 서버도 시작하도록 변경 (안정성 확보)
        condition: service_started
    networks:
      - rag-network
    restart: unless-stopped
    # 🚨 수정된 부분: FastAPI와 Streamlit을 동시에 백그라운드에서 실행
    command: sh -c "uvicorn src.main:app --host 0.0.0.0 --port 8080 --reload & streamlit run src/streamlit_app.py --server.port 8501 --server.enableCORS false"

# --- 3. Network Definition (서비스 간 통신) ---
networks:
  rag-network:
    driver: bridge

# --- 4. Volume Definition (데이터 영속성) ---
volumes:
  chroma-data:
    driver: local